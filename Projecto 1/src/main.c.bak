/*
// Sistemas Operativos, DEI/IST/ULisboa 2017-18
// Projeto SO - exercicio 1 12/11/2017
// Miguel Coelho 87687
// Diogo Sousa 87651
*/

#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <pthread.h>

#include "matrix2d.h"
#include "mplib3.h"


/*--------------------------------------------------------------------
| Struct && Global Variables
---------------------------------------------------------------------*/

typedef struct taskArg{
  int _id, _iteracoes, _ntasks, _N, _linhasFatia;
}*TaskArg;

TaskArg _TaskArg;


/*--------------------------------------------------------------------
| Function: parse_integer_or_exit
---------------------------------------------------------------------*/

int parse_integer_or_exit(char const *str, char const *name)
{
  int value;

  if(sscanf(str, "%d", &value) != 1) {
    fprintf(stderr, "\nErro no argumento \"%s\".\n\n", name);
    exit(1);
  }
  return value;
}


/*--------------------------------------------------------------------
| Function: parse_double_or_exit
---------------------------------------------------------------------*/

double parse_double_or_exit(char const *str, char const *name)
{
  double value;

  if(sscanf(str, "%lf", &value) != 1) {
    fprintf(stderr, "\nErro no argumento \"%s\".\n\n", name);
    exit(1);
  }
  return value;
}


/*--------------------------------------------------------------------
| Function: fnThread
---------------------------------------------------------------------*/

void *fnThread(void *a) {

  int i, j, k;
  double value;

  TaskArg arg  = (TaskArg) a;              //Inicializacao dos argumentos
  int N = arg->_N;
  int linhasFatia = arg->_linhasFatia;
  int id = arg->_id;
  int iteracoes = arg->_iteracoes;
  int ntasks = arg->_ntasks;
  int tamanho_linha = sizeof(double) * (N + 2);

  DoubleMatrix2D *matrix = dm2dNew(linhasFatia + 2, N + 2);
  DoubleMatrix2D *matrix_aux = dm2dNew(linhasFatia + 2, N + 2);

  for(j = 0; j < linhasFatia + 2; j++)
    if (receberMensagem (0, id, dm2dGetLine(matrix,j), tamanho_linha) == -1) {  // recebe fatia da tarefa mestre
      printf("Erro ao receber mensagem da tarefa %d para tarefa %d.\n", 0, id); exit(1);
    }

  dm2dCopy(matrix_aux, matrix);  //Efectua a copia da fatia

  for (i = 0; i < iteracoes; i++) {

    //Calculo das temperaturas numa iteracao

    for (k = 1; k < (linhasFatia + 2) - 1; k++) // onde linhasFatia + 2 é o numero de linhas
      for (j = 1; j < (N + 2) - 1; j++) { // onde N + 2 é o numero de colunas
        value = (dm2dGetEntry(matrix, k-1, j) + dm2dGetEntry(matrix, k+1, j) +
          dm2dGetEntry(matrix, k, j-1) + dm2dGetEntry(matrix, k, j+1)) / 4.0;
          dm2dSetEntry(matrix_aux, k, j, value);
      }

    dm2dCopy(matrix, matrix_aux);  // Actualiza os valores da matriz a enviar


    if (ntasks != 1){  //Se so existir uma tarefa, nao envia mensagens

      if(id == 1) {     //Troca de mensagem da tarefa que calcula a fatia superior da matriz

        if (enviarMensagem(id, id + 1, dm2dGetLine(matrix, linhasFatia), tamanho_linha) == -1) {
          printf("Erro ao enviar mensagem da tarefa %d para tarefa %d.\n", id, id + 1); exit(1);
        }

        if (receberMensagem(id + 1, id, dm2dGetLine(matrix, linhasFatia + 1), tamanho_linha) == -1) {
          printf("Erro ao receber mensagem da tarefa %d para tarefa %d.\n", id + 1, id); exit(1);
        }

      }
      else if(id == ntasks) {     //Troca de mensagem da tarefa que calcula a fatia inferior da matriz

        if (receberMensagem(id - 1, id, dm2dGetLine(matrix, 0), tamanho_linha) == -1) {
          printf("Erro ao receber mensagem da tarefa %d para tarefa %d.\n", id - 1, id); exit(1);
        }

        if (enviarMensagem(id, id - 1, dm2dGetLine(matrix, 1), tamanho_linha) == -1) {
          printf("Erro ao enviar mensagem da tarefa %d para tarefa %d.\n", id, id - 1); exit(1);
        }

      }
      else {      //Troca de mensagem da tarefas que calculam as fatias internas da matriz

        if (receberMensagem(id - 1, id, dm2dGetLine(matrix, 0), tamanho_linha) == -1) {
          printf("Erro ao receber mensagem da tarefa %d para tarefa %d.\n", id - 1, id); exit(1);
        }

        if (enviarMensagem(id, id - 1, dm2dGetLine(matrix, 1), tamanho_linha) == -1) {
          printf("Erro ao enviar mensagem da tarefa %d para tarefa %d.\n", id, id - 1); exit(1);
        }

        if (enviarMensagem(id, id + 1, dm2dGetLine(matrix, linhasFatia), tamanho_linha) == -1) {
          printf("Erro ao enviar mensagem da tarefa %d para tarefa %d.\n", id, id + 1); exit(1);
        }

        if (receberMensagem(id + 1, id, dm2dGetLine(matrix, linhasFatia + 1), tamanho_linha) == -1) {
          printf("Erro ao receber mensagem da tarefa %d para tarefa %d.\n", id + 1, id); exit(1);
        }
      }
  }
  dm2dCopy(matrix_aux, matrix); // Actualiza a cópia da matriz para serem efectuados os calculos da temperatura
}

  for(j = 0; j < linhasFatia + 2; j++)  // Envia a fatia para a main
    if (enviarMensagem(id, 0, dm2dGetLine(matrix, j), tamanho_linha) == -1) {
      printf("Erro ao enviar mensagem da tarefa %d para tarefa %d.\n", id, 0); exit(1);   //Envia fatia calculada para fatia mestre
  }

  dm2dFree(matrix);
  dm2dFree(matrix_aux);

  return 0;
}


/*--------------------------------------------------------------------
| Function: main
---------------------------------------------------------------------*/

int main (int argc, char **argv) {

  if(argc != 9) {
    fprintf(stderr, "\nNumero invalido de argumentos.\n");
    fprintf(stderr, "Uso: Projecto N tEsq tSup tDir tInf iteracoes num_tarefas tamanho_canal\n\n");
    return 1;
  }

  /* argv[0] = program name */
  int N = parse_integer_or_exit(argv[1], "N");
  double tEsq = parse_double_or_exit(argv[2], "tEsq");
  double tSup = parse_double_or_exit(argv[3], "tSup");
  double tDir = parse_double_or_exit(argv[4], "tDir");
  double tInf = parse_double_or_exit(argv[5], "tInf");
  int iteracoes = parse_integer_or_exit(argv[6], "iteracoes");
  int ntasks = parse_integer_or_exit(argv[7], "num_tarefas");
  int tamanho_canal = parse_integer_or_exit(argv[8], "tamanho_canal");


  fprintf(stderr, "\nArgumentos:\n"
  " N=%d tEsq=%.1f tSup=%.1f tDir=%.1f tInf=%.1f iteracoes=%d ntasks=%d tamanho_canal=%d\n",
  N, tEsq, tSup, tDir, tInf, iteracoes, ntasks, tamanho_canal);


  if(N < 1 || tEsq < 0 || tSup < 0 || tDir < 0 || tInf < 0 || iteracoes < 1 || (N % ntasks) != 0 || tamanho_canal < 0) {
    fprintf(stderr, "\nErro: Argumentos invalidos.\n"
  " Lembrar que N >= 1, temperaturas >= 0, iteracoes >= 1, numero de tasks multiplo de N, tamanho do canal >= 0\n\n");
    return 1;
  }


  int i, j;
  int tamanho_linha = sizeof(double) * (N + 2);
  int linhasFatia = N / ntasks;     //Numero de linhas interiores de uma fatia
  DoubleMatrix2D *matrix;

  pthread_t *tid;
  tid = (pthread_t*) malloc(ntasks * sizeof(pthread_t));

  _TaskArg = (TaskArg) malloc(sizeof(struct taskArg) * ntasks); // Aloca memoria para os argumentos das slaves


  if (inicializarMPlib(tamanho_canal, ntasks + 1) == -1) {
    printf("Erro ao inicializar MPLib.\n"); return 1;
  }


  for (i = 0; i < ntasks; i++) {          //Cria Tarefas e inicializa os seus argumentos
    _TaskArg[i]._id = i + 1; // i=0 Tarefa mestre
    _TaskArg[i]._iteracoes = iteracoes;
    _TaskArg[i]._ntasks = ntasks;
    _TaskArg[i]._N = N;
    _TaskArg[i]._linhasFatia = linhasFatia;
    if (pthread_create (&tid[i], NULL, fnThread, &_TaskArg[i]) != 0){
      printf("Erro ao criar tarefa.\n");
      return 1;
    }
  }

  matrix = dm2dNew(N + 2, N + 2);

  if (matrix == NULL) {
    fprintf(stderr, "\nErro: Nao foi possivel alocar memoria para a matriz.\n\n");
    return -1;
  }

  //Inicializa a matriz
  dm2dSetLineTo (matrix, 0, tSup);
  dm2dSetLineTo (matrix, N + 1, tInf);
  dm2dSetColumnTo(matrix, 0, tEsq);
  dm2dSetColumnTo(matrix,N + 1, tDir);

  for (i = 0; i < ntasks; i++){
  	for(j = 0; j < linhasFatia + 2; j++)
      if (enviarMensagem(0, i + 1, dm2dGetLine(matrix, j + (linhasFatia * i)), tamanho_linha) == -1) { //Envia a fatia para cada tarefa
        printf("Erro ao enviar mensagem da tarefa %d para tarefa %d.\n", 0, i + 1); return 1;
      }
  }

  for (i = 0; i < ntasks; i++) {
    for(j = 0; j < linhasFatia + 2; j++)
      if (receberMensagem (i + 1, 0, dm2dGetLine(matrix, j + (linhasFatia * i)), tamanho_linha) == -1) { //Recebe a fatia de cada tarefa e altera na matriz
        printf("Erro ao receber mensagem da tarefa %d para tarefa %d.\n", i + 1, 0); return 1;
      }

    if (pthread_join (tid[i], NULL)) {
      printf("Erro ao esperar por tarefa.\n");
      return 2;
    }
  }

  dm2dPrint(matrix);

  free(tid);
  free(_TaskArg);
  libertarMPlib();
  dm2dFree(matrix);

  return 0;
}
